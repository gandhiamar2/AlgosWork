/**
 * @author: gandhi amarnadh tadiparthi
 **/
package project1;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

public class Encoder {

	static int bitlength;
	static String s, file;
	String str, sym;
	static Thread thread;
	static boolean alive = true;
	static File f;
	static StringBuilder sbr;
	static String arra[];
	static int count = 0;
	static String line;

	/**
	 * Reads the file that is un-compressed into a string buffer Initiates a
	 * thread and pass the stringbuffer to the thread, the main thread waits for
	 * the child to complete and is ready for new arguments
	 *
	 * @param args,line
	 *            - The command line arguments
	 * @param arra
	 *            - array splitting the command line argument
	 * @param f
	 *            - input path File
	 * @param sbr
	 *            - Buffered reader reading data from File f
	 * @param bitlength
	 *            - bit length of output code
	 * @param arra
	 *            - Thread object referring to Encoder_thread inner class *
	 * @throws java.io.IOException
	 *             - File input/output failure
	 * @throws java.io.FileNotFoundException
	 *             - File input/output failure
	 * @throws java.io.InterruptedException
	 *             - thread interrupted
	 * @throws java.io.ArrayIndexOutOfBoundsException
	 *             - command argument is invalid
	 */

	public static void main(String[] args) throws InterruptedException {

		Scanner input = new Scanner(System.in);
		do {
			if (count == 1) {
				System.out
						.println("\n" + "Enter the name of your (input.txt) file and code bit length(9-12 is optimal)");
				line = input.nextLine();
				 
			}
			try {
				if (count == 1) {
					arra = line.split(" ");
					file = arra[0];
					bitlength = Integer.parseInt(arra[1]);
				} else {
					file = args[0];
					bitlength = Integer.parseInt(args[1]);
				}
				try {

					f = new File(file);
					BufferedReader bfr = new BufferedReader(new FileReader(f));
					s = bfr.readLine();
					sbr = new StringBuilder();
		// file being read to string buffer sbr
					while (s != null) {
						sbr.append(s);
						s = bfr.readLine();
					}

					thread = new Thread(new Encoder().new Encoder_thread());
					thread.start();
					thread.join();

				} catch (FileNotFoundException e) {

					System.out.println("no file found");

				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			} catch (ArrayIndexOutOfBoundsException e) {
				if (arra.length != 2) {
					System.out.println("input format is not valid");
				} else
					System.out.println(e.getMessage());
			}
			count = 1;
			// keeping the main thread alive for next arguments
		} while (!thread.isAlive());
	}

	/**
	 * Encoder_thread become active by main thread call Char sequence in file
	 * passed through encoding logic and bit sequence is generated on output
	 * .lzw file
	 *
	 * @param dictionary
	 *            - Initialized Arraylist of ASCII values
	 * @param output
	 *            - string builder appending the bit sequence char wise.
	 * @param bitmodifier
	 *            - string needed to adjust output bit length
	 * @param str
	 *            - String generated by encoding logic
	 * @param bitlength
	 *            - bit length of output code
	 * @param sym
	 *            - symbol string representation of char sequence from file
	 * @param binarized-
	 *            String of bit sequence of str (8-bit) later modified to
	 *            (bitlength-bit)
	 * @param fout-
	 *            File generated renamed to .lzw
	 * @param bwr-
	 *            Buffered writer writing output to fout file
	 * @throws java.io.IOException
	 *             - File input/output failure
	 * @throws java.io.FileNotFoundException
	 *             - File input/output failure
	 * @throws java.io.InterruptedException
	 *             - thread interrupted
	 * @throws java.io.ArrayIndexOutOfBoundsException
	 *             - command argument is invalid
	 */

	class Encoder_thread implements Runnable {

		ArrayList<String> dictionary = new ArrayList<>();
		String bitmodifier = "";
		StringBuilder output = new StringBuilder();

		@Override
		public void run() {
		// ASCII dictionary
			for (int i = 0; i < bitlength; i++) {
				bitmodifier = bitmodifier + "0";
			}
			for (char letter = 0; letter < 256; letter++) {
				dictionary.add(letter + "");
			}
			str = "";
			sym = "";
		// reading char wise and applying LZW compression algorithm
			for (char c : sbr.toString().toCharArray()) {

				sym = c + "";

				if (dictionary.indexOf(str + sym) != -1) {
					str = str + sym;
				} else {

					String binarized = Integer.toBinaryString(dictionary.indexOf(str));
		// generating bitsequence as per input bit length
					if (binarized.length() < bitlength)
						binarized = bitmodifier.substring(0, bitlength - binarized.length()).concat(binarized) + " ";
					else
						binarized = binarized.substring(binarized.length() - bitlength) + " ";

					output.append(binarized);
					dictionary.add(str + sym + "");
					str = sym;
				}

			}

			String binarized = Integer.toBinaryString(dictionary.indexOf(str));
			if (binarized.length() < bitlength)
				binarized = bitmodifier.substring(0, bitlength - binarized.length()).concat(binarized);
			else
				binarized = binarized.substring(binarized.length() - bitlength);
			output.append(binarized);
			System.out.println(output.toString());
		// writing output to .lzw file
			File fout = new File(file.replace(".txt", ".lzw"));
			BufferedWriter bwr;
			try {
				bwr = new BufferedWriter(new FileWriter(fout));
				bwr.write(output.toString());
				bwr.flush();
				System.out.println("file generated" + fout);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

	}

}