/**
 * @author: gandhi amarnadh tadiparthi
 **/
package project1;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;


public class Decoder {

	static int bitlength;
	static String s, file;
	String str, newstr;
	static Thread thread;
	static boolean alive = true;
	static File f;
	static StringBuilder sbr;
	static String arra[];
	static int count = 0;
	static String line;


/**
 * Reads the file that is compressed into a string buffer. Initiates a thread
 * and pass the stringbuffer to the thread, the main thread waits for the child
 * to complete and is ready for new arguments
 *
 * @param args,line
 *            - The command line arguments
 * @param arra
 *            - array splitting the command line argument
 * @param f
 *            - input path File
 * @param sbr
 *            - Buffered reader reading data from File f
 * @param bitlength
 *            - bit length of input code
 * @param arra
 *            - Thread object referring to Encoder_thread inner class *
 * @throws java.io.IOException
 *             - File input/output failure
 * @throws java.io.FileNotFoundException
 *             - File input/output failure
 * @throws java.io.InterruptedException
 *             - thread interrupted
 * @throws java.io.ArrayIndexOutOfBoundsException
 *             - command argument is invalid
 */

	public static void main(String[] args) throws InterruptedException {

		Scanner input = new Scanner(System.in);
		do {
			if (count == 1) {
				System.out
						.println("\n" + "Enter the name of your (input.lzw) file and code bit length(9-12 is optimal)");
				line = input.nextLine();
				
			}
			try {
				if (count == 1) {
					arra = line.split(" ");
					file = arra[0];
					bitlength = Integer.parseInt(arra[1]);
				}
				else
				{
					file = args[0];
					bitlength = Integer.parseInt(args[1]);
				}
				try {

					f = new File(file);
					BufferedReader bfr = new BufferedReader(new FileReader(f));
					s = bfr.readLine();
					sbr = new StringBuilder();
			// file being read to string buffer sbr
					while (s != null) {
						sbr.append(s);
						s = bfr.readLine();
					}

					thread = new Thread(new Decoder().new Decpder_thread());
					thread.start();
					thread.join();

				} catch (FileNotFoundException e) {

					System.out.println("no file found");

				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			} catch (ArrayIndexOutOfBoundsException e) {
				if (arra.length != 2) {
					System.out.println("input format is not valid");
				} else
					System.out.println(e.getMessage());
			}

			count = 1;
			// keeping the main thread alive for next arguments
		} while (!thread.isAlive());
	}

	/**
	 * Decoder_thread become active by main thread call Char sequence in file
	 * passed through encoding logic and bit sequence is generated on output
	 * _decoded.txt file
	 *
	 * @param dictionary
	 *            - Initialized Arraylist of ASCII values
	 * @param output
	 *            - string builder appending the decoded newstr
	 * @param str
	 *            - String generated by newstr
	 * @param code
	 *            - bit stream in file converted to int.
	 * @param newstr
	 *            - decoded string from code
	 * @param fout-
	 *            File generated renamed to _decoded.txt
	 * @param bwr-
	 *            Buffered writer writing output to fout file
	 * @throws java.io.IOException
	 *             - File input/output failure
	 * @throws java.io.FileNotFoundException
	 *             - File input/output failure
	 * @throws java.io.InterruptedException
	 *             - thread interrupted
	 * @throws java.io.ArrayIndexOutOfBoundsException
	 *             - command argument is invalid
	 */

	class Decpder_thread implements Runnable {

		ArrayList<String> dictionary = new ArrayList<>();
		String bitmodifier = "";
		StringBuilder output = new StringBuilder();
		int s = 0;

		public void run() {
			// ASCII dictionary
			for (char letter = 0; letter < 256; letter++) {
				dictionary.add(letter + "");
			}

			// reading each bit sequence and applying LZW de compression algorithm
			for (String s1 : sbr.toString().split(" ")) {
				int code = Integer.parseInt(s1, 2);
				if (code >= dictionary.size()) {
					newstr = str + str.charAt(0);
					
				} else {
					newstr = dictionary.get(code);
					
				}
				output.append(newstr);
				if (dictionary.indexOf(str + newstr.charAt(0)) == -1 && s == 1) {
					dictionary.add(str + newstr.charAt(0));
				}
				str = newstr;
				
				s = 1;
			}

			System.out.println(output.toString());
			// writing output to *decoded.txt file
			File fout = new File(file.replace(".lzw", "_decoded.txt"));
			BufferedWriter bwr;
			try {
				bwr = new BufferedWriter(new FileWriter(fout));
				bwr.write(output.toString());
				bwr.flush();
				System.out.println("file generated" + fout);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
}
